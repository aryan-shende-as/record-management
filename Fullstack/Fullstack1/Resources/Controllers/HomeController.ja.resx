<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="homeTitle" xml:space="preserve">
    <value>ホームページ</value>
  </data>
  <data name="welcomeMessage" xml:space="preserve">
    <value>当社の記録管理システムへようこそ。文書およびデータの効率的で安全かつ合理的な管理における信頼できるパートナーです。今日の急速に進化するデジタル世界では、記録を効果的に管理することは単なる必要性ではなく、戦略的な利点でもあります。当社のプラットフォームは、組織が重要な情報を取り扱い、保存し、取得し、保護する方法を簡素化するよう設計されています。小規模な企業、大企業、または政府機関であっても、当社の堅牢でスケーラブルなシステムは、貴社の特有のニーズに対応するように調整されています。紙ベースのプロセスから完全にデジタル化された環境への移行を支援し、どこからでも迅速かつ正確に記録にアクセスできるようにします。使いやすいインターフェース、カスタマイズ可能なワークフロー、強力な検索機能により、大量の文書を簡単に管理しながら、データ保護規制や業界標準に準拠することができます。当社のシステムは、さまざまなファイル形式に対応しており、バージョン管理、監査ログ、安全な共有、自動保持ポリシー、クラウドバックアップなどの機能を提供します。これらの機能により、記録は整理されているだけでなく、紛失、不正アクセス、データ侵害からも保護されます。セキュリティは当社の中核であり、すべての記録は暗号化され、アクセスは役割ベースで制御されており、許可された担当者のみが機密データを閲覧または変更できます。すべての組織が異なる運用方法を持っていることを理解しているため、当社のソリューションは高度に構成可能であり、内部プロセスに完全に一致するようにカスタムフォルダ、タグ、カテゴリ、アクセスルールを作成できます。人事ファイル、財務記録、法的文書、または運用データを管理している場合でも、当社のプラットフォームは、透明性、責任、および運用効率を高める集中型ハブを提供します。また、当社のシステムは既存のソフトウェアエコシステム（ERP、CRM、メールプラットフォームを含む）とシームレスに統合され、既存のワークフローを中断することなくスムーズなユーザー体験を提供します。リアルタイムの分析およびレポートツールを使用すると、文書の使用パターンに関するインサイトを取得し、コンプライアンス指標を追跡し、データに基づいた情報に基づいた意思決定を行うことができます。当社のサポートチームは24時間体制で、導入、トレーニング、トラブルシューティング、システムアップデートに対応します。当社は単なる製品ではなく、組織が整理され、コンプライアンスに準拠し、将来に備えるためのパートナーシップを提供することに尽力しています。今すぐ情報管理の未来を受け入れ、信頼できる記録管理システムで記録の可能性を最大限に引き出しましょう。文書が安全な手にあるという安心感を得ながら、生産性を向上させ、運用コストを削減できます。安全、スマート、かつ効率的に記録を管理するお手伝いをさせてください。</value>
  </data>
</root>